name: Build, Push & Deploy Dashboard

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Dashboard
        env:
          VITE_API_URL: https://backend-dashboard.mrbeas.net
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.MEASUREMENTID }}
        run: |
          docker build \
            --build-arg VITE_API_URL=$VITE_API_URL \
            --build-arg VITE_FIREBASE_API_KEY=$VITE_FIREBASE_API_KEY \
            --build-arg VITE_FIREBASE_AUTH_DOMAIN=$VITE_FIREBASE_AUTH_DOMAIN \
            --build-arg VITE_FIREBASE_PROJECT_ID=$VITE_FIREBASE_PROJECT_ID \
            --build-arg VITE_FIREBASE_STORAGE_BUCKET=$VITE_FIREBASE_STORAGE_BUCKET \
            --build-arg VITE_FIREBASE_MESSAGING_SENDER_ID=$VITE_FIREBASE_MESSAGING_SENDER_ID \
            --build-arg VITE_FIREBASE_APP_ID=$VITE_FIREBASE_APP_ID \
            --build-arg VITE_FIREBASE_MEASUREMENT_ID=$VITE_FIREBASE_MEASUREMENT_ID \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/dashboard:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/dashboard:latest

      - name: Deploy to Production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            set -ex
            
            # Define container names
            DASHBOARD_CONTAINER="dashboard"
            CADDY_CONTAINER="caddy_reverse_proxy"
            
            # Function to check container status
            check_container() {
              docker inspect -f '{{.State.Status}}' $1 2>/dev/null || echo "missing"
            }
            
            # Function to check container logs
            check_logs() {
              echo "=== $1 Container Logs (last 50 lines) ==="
              docker logs $1 2>&1 | tail -n 50
              echo "================================"
            }
            
            # Navigate to dashboard directory
            cd /home/million/mrbeas/dashboard || {
              echo "::error::Could not change to dashboard directory"
              exit 1
            }
            
            # Stop and remove any existing containers
            echo "Stopping and removing existing containers..."
            docker-compose down --remove-orphans --timeout 30 || true
            docker rm -f $DASHBOARD_CONTAINER $CADDY_CONTAINER || true
            
            # Clean up networks and volumes
            echo "Cleaning up networks and volumes..."
            docker network prune -f || true
            docker volume prune -f || true
            
            # Build and start services
            echo "Building and starting services..."
            docker-compose up -d --build || {
              echo "::error::Failed to start services"
              exit 1
            }
            
            # Wait for services to be fully running
            echo "Waiting for services to be ready (timeout: 60 seconds)..."
            timeout=60
            all_healthy=false
            
            while [ $timeout -gt 0 ]; do
              dashboard_status=$(check_container $DASHBOARD_CONTAINER)
              caddy_status=$(check_container $CADDY_CONTAINER)
              
              echo "Status: Dashboard=$dashboard_status, Caddy=$caddy_status"
              
              if [ "$dashboard_status" = "running" ] && \
                 [ "$caddy_status" = "running" ]; then
                all_healthy=true
                break
              fi
              
              # Check for restarting containers
              if [ "$dashboard_status" = "restarting" ]; then
                check_logs $DASHBOARD_CONTAINER
              fi
              if [ "$caddy_status" = "restarting" ]; then
                check_logs $CADDY_CONTAINER
              fi
              
              sleep 5
              timeout=$((timeout-5))
            done
            
            if [ "$all_healthy" = false ]; then
              echo "::error::Timeout waiting for services to start"
              echo "=== Final Container Status ==="
              docker ps -a
              echo "=== Container Logs ==="
              check_logs $DASHBOARD_CONTAINER || true
              check_logs $CADDY_CONTAINER || true
              exit 1
            fi
            
            # Additional health checks
            echo "Running health checks..."
            
            # Check Caddy is serving traffic
            if ! curl -I --retry 3 --retry-delay 5 http://localhost 2>/dev/null | grep -q "HTTP/.*200"; then
              echo "::error::Caddy is not responding with 200 OK"
              check_logs $CADDY_CONTAINER
              exit 1
            fi
            
            # Reload Caddy configuration
            echo "Reloading Caddy configuration..."
            docker exec $CADDY_CONTAINER caddy reload || {
              echo "::warning::Failed to reload Caddy configuration"
            }
            
            echo "::notice::âœ… Deployment successful!"
            echo "Current running containers:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # Final verification
            echo "Deployment verification:"
            echo "- Dashboard status: $(check_container $DASHBOARD_CONTAINER)"
            echo "- Caddy status: $(check_container $CADDY_CONTAINER)"