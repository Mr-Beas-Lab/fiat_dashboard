name: Deploy Frontend to Production

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            millionmulugeta/dashboard:latest
            millionmulugeta/dashboard:${{ github.sha }}
          build-args: |
            VITE_API_URL=https://backend-dashboard.mrbeas.net
            VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}
            VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
            VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}
            VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
            VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
            VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}
            VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.MEASUREMENTID }}
          cache-from: type=registry,ref=millionmulugeta/dashboard:buildcache
          cache-to: type=registry,ref=millionmulugeta/dashboard:buildcache,mode=max

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          timeout: 5m  # Proper duration format (5 minutes)
          command_timeout: 10m  # For individual commands
          script: |
            #!/bin/bash
            set -exo pipefail
            
            # Setup environment
            DEPLOY_DIR="/home/million/mrbeas/dashboard"
            LOG_FILE="/tmp/deploy_$(date +%Y%m%d_%H%M%S).log"
            
            # Redirect all output to log file
            exec > >(tee -a "$LOG_FILE") 2>&1
            
            echo "🔐 Starting deployment at $(date)"
            
            # Verify deployment directory exists
            if [ ! -d "$DEPLOY_DIR" ]; then
              echo "❌ Error: Deployment directory $DEPLOY_DIR not found"
              exit 1
            fi
            
            cd "$DEPLOY_DIR" || exit 1
            
            # Handle sudo password
            echo "${{ secrets.SERVER_PASSWORD }}" | sudo -S true
            
            # Check for running containers using ports 80/443
            echo "🔍 Checking for processes using ports 80/443..."
            if sudo lsof -i :80 || sudo lsof -i :443; then
              echo "🛑 Found processes using HTTP ports, stopping containers..."
              docker-compose down --timeout 2 || true
              
              # Force stop any remaining processes
              echo "${{ secrets.SERVER_PASSWORD }}" | sudo -S pkill -9 docker-proxy || true
              echo "${{ secrets.SERVER_PASSWORD }}" | sudo -S fuser -k 80/tcp || true
              echo "${{ secrets.SERVER_PASSWORD }}" | sudo -S fuser -k 443/tcp || true
              sleep 2
            fi
            
            # Clean up Docker resources
            echo "🧹 Cleaning up Docker resources..."
            docker system prune -af || true
            docker network prune -f || true
            
            # Pull the latest image
            echo "⬇️ Pulling latest Docker image..."
            docker pull millionmulugeta/dashboard:latest
            
            # Start deployment
            echo "🚀 Starting containers..."
            docker-compose up -d --remove-orphans
            
            # Health check
            echo "🩺 Performing health checks..."
            for i in {1..10}; do
              if docker ps --filter "name=dashboard" --format "{{.Status}}" | grep -q "(healthy)"; then
                break
              fi
              echo "⏳ Waiting for containers to be healthy (attempt $i/10)..."
              sleep 10
            done
            
            # Verify deployment
            echo "✅ Deployment verification:"
            docker-compose ps
            
            # Check Caddy logs
            echo "📝 Caddy logs:"
            docker logs caddy_reverse_proxy --tail 50
            
            # Final status
            echo "🏁 Deployment completed successfully at $(date)"
            echo "🔄 Container status:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # Exit cleanly
            exit 0